default_platform(:android)

platform :android do
  ARTIFACT_FOLDER = 'artifacts'.freeze
  RELEASE_FOLDER = 'releases'.freeze

  lane :ci do
    build_apks
    unit_tests
    assemble_instrumentation_apks
    lint
    ktLint
  end

  lane :build_apks do
    gradle(task: 'app:assembleProprietaryRelease -x lint -x lintVitalProprietaryRelease')
    folder = ARTIFACT_FOLDER + '/apk'
    copy_artifacts(
      target_path: folder,
      artifacts: ['app/build/outputs/apk/*/release/*.apk', 'app/build/outputs/mapping/*/release/mapping.txt']
    )
  end

  lane :unit_tests do
    gradle(task: 'allUnitTests')
  end

  lane :assemble_instrumentation_apks do
    gradle(task: 'app:assembleProprietaryDebug app:assembleAndroidTest')
    Dir.chdir('../') do
      FileUtils.mkdir_p 'artifacts'
      FileUtils.copy('app/build/outputs/apk/proprietary/debug/app-proprietary-debug.apk', 'artifacts/app-debug.apk')
      FileUtils.copy('app/build/outputs/apk/androidTest/proprietary/debug/app-proprietary-debug-androidTest.apk', 'artifacts/instrumentation.apk')
    end
  end

  lane :lint do
    begin
      gradle(task: 'app:lintProprietaryDebug')
    ensure
      folder = ARTIFACT_FOLDER + '/lint'
      copy_artifacts(
        target_path: folder,
        artifacts: ['app/build/reports/*.html']
      )
    end
  end

  lane :ktLint do
    gradle(task: 'ktlintCheck')
  end

  lane :release do
    gradle(task: 'app:assembleProprietaryRelease')
    app_version = gradle(task: 'appVersion', flags: '-q').match('#BEGIN_VERSION#(.*?)#END_VERSION#')[-1]
    folder = RELEASE_FOLDER + '/' + app_version
    copy_artifacts(
      target_path: folder,
      artifacts: ['app/build/outputs/**/release/*.apk']
    )
    github_release = set_github_release(
      repository_name: "PaulWoitaschek/Voice",
      api_token: ENV["GITHUB_TOKEN"],
      tag_name: app_version,
      name: "",
      description: "",
      commitish: "master",
      upload_assets: [folder + '/' + 'app-proprietary-release.apk']
    )
  end
end
